["^ ","~:output",["^ ","~:js","goog.provide('ribelo.visby.quant');\ngoog.require('cljs.core');\ngoog.require('cljs.spec.alpha');\ngoog.require('net.cgrand.xforms');\ngoog.require('net.cgrand.xforms.rfs');\ngoog.require('ribelo.visby.math');\ngoog.require('ribelo.visby.emath');\ngoog.require('ribelo.visby.stats');\nribelo.visby.quant.ann_return_geometric = (function ribelo$visby$quant$ann_return_geometric(var_args){\nvar G__50243 = arguments.length;\nswitch (G__50243) {\ncase 1:\nreturn ribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$1 = (function (freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.add(1.0),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_)),net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50564 = null;\nvar G__50564__0 = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,0.0], null);\n});\nvar G__50564__1 = (function (p__50247){\nvar vec__50249 = p__50247;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50249,(0),null);\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50249,(1),null);\nreturn (ribelo.visby.math.pow(x,(freq / n)) - 1.0);\n});\nvar G__50564__2 = (function (acc,p__50248){\nvar vec__50252 = p__50248;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50252,(0),null);\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50252,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,n], null);\n});\nG__50564 = function(acc,p__50248){\nswitch(arguments.length){\ncase 0:\nreturn G__50564__0.call(this);\ncase 1:\nreturn G__50564__1.call(this,acc);\ncase 2:\nreturn G__50564__2.call(this,acc,p__50248);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50564.cljs$core$IFn$_invoke$arity$0 = G__50564__0;\nG__50564.cljs$core$IFn$_invoke$arity$1 = G__50564__1;\nG__50564.cljs$core$IFn$_invoke$arity$2 = G__50564__2;\nreturn G__50564;\n})()\n));\n});\n\nribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$1((252));\n});\n\nribelo.visby.quant.ann_return_geometric.cljs$lang$maxFixedArity = 1;\n\nribelo.visby.quant.ann_return_simple = (function ribelo$visby$quant$ann_return_simple(var_args){\nvar G__50258 = arguments.length;\nswitch (G__50258) {\ncase 1:\nreturn ribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$1 = (function (freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.stats.mean,ribelo.visby.emath.mul(freq));\n});\n\nribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$1((252));\n});\n\nribelo.visby.quant.ann_return_simple.cljs$lang$maxFixedArity = 1;\n\n/**\n * Average annualized returns over a period, convenient when comparing returns.\n *   It can be an Arithmetic or Geometric (default) average return: if compounded with itself the\n *   geometric average will be equal to the cumulative return\n */\nribelo.visby.quant.annualized_return = (function ribelo$visby$quant$annualized_return(var_args){\nvar G__50260 = arguments.length;\nswitch (G__50260) {\ncase 2:\nreturn ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2 = (function (freq,mode){\nvar G__50263 = mode;\nvar G__50263__$1 = (((G__50263 instanceof cljs.core.Keyword))?G__50263.fqn:null);\nswitch (G__50263__$1) {\ncase \"geometric\":\nreturn ribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$1(freq);\n\nbreak;\ncase \"simple\":\nreturn ribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$1(freq);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__50263__$1)].join('')));\n\n}\n});\n\nribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$1 = (function (freq){\nreturn ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2(freq,new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463));\n});\n\nribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2((252),new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463));\n});\n\nribelo.visby.quant.annualized_return.cljs$lang$maxFixedArity = 2;\n\n/**\n * Asset/Portfolio annualized return minus Benchmark annualized return\n */\nribelo.visby.quant.active_return = (function ribelo$visby$quant$active_return(xs,freq,mode){\nvar xs_SINGLEQUOTE_ = cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2(freq,mode),xs);\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2(freq,mode),ribelo.visby.emath.sub(xs_SINGLEQUOTE_));\n});\n/**\n * Annualized standard deviation of asset/portfolio returns\n */\nribelo.visby.quant.annualized_risk = (function ribelo$visby$quant$annualized_risk(var_args){\nvar G__50266 = arguments.length;\nswitch (G__50266) {\ncase 1:\nreturn ribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$1 = (function (freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.stats.std,ribelo.visby.emath.mul(ribelo.visby.math.sqrt(freq)));\n});\n\nribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$1((252));\n});\n\nribelo.visby.quant.annualized_risk.cljs$lang$maxFixedArity = 1;\n\n/**\n * Sharpe Ratio.Compute Sharpe ratio for an collection XS of values (daily, weekly, etc) and\n * a free-risk rate. Annual free-risk must be divided to match the right timeframe.\n */\nribelo.visby.quant.sharpe_ratio = (function ribelo$visby$quant$sharpe_ratio(var_args){\nvar G__50273 = arguments.length;\nswitch (G__50273) {\ncase 1:\nreturn ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.stats.mean,ribelo.visby.stats.std], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50570 = null;\nvar G__50570__0 = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,0.0], null);\n});\nvar G__50570__1 = (function (p__50275){\nvar vec__50277 = p__50275;\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50277,(0),null);\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50277,(1),null);\nreturn ((mean - frisk) / std);\n});\nvar G__50570__2 = (function (acc,coll){\nreturn coll;\n});\nG__50570 = function(acc,coll){\nswitch(arguments.length){\ncase 0:\nreturn G__50570__0.call(this);\ncase 1:\nreturn G__50570__1.call(this,acc);\ncase 2:\nreturn G__50570__2.call(this,acc,coll);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50570.cljs$core$IFn$_invoke$arity$0 = G__50570__0;\nG__50570.cljs$core$IFn$_invoke$arity$1 = G__50570__1;\nG__50570.cljs$core$IFn$_invoke$arity$2 = G__50570__2;\nreturn G__50570;\n})()\n));\n});\n\nribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1(0.0);\n});\n\nribelo.visby.quant.sharpe_ratio.cljs$lang$maxFixedArity = 1;\n\n/**\n * Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n * for negative skewness and excess kurtosis.\n */\nribelo.visby.quant.adjusted_sharpe_ratio = (function ribelo$visby$quant$adjusted_sharpe_ratio(var_args){\nvar G__50284 = arguments.length;\nswitch (G__50284) {\ncase 1:\nreturn ribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1(frisk),ribelo.visby.stats.skewness,ribelo.visby.stats.kurtosis], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50580 = null;\nvar G__50580__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50580__1 = (function (p__50285){\nvar vec__50287 = p__50285;\nvar sr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50287,(0),null);\nvar sk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50287,(1),null);\nvar ku = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50287,(2),null);\nreturn (sr * (((1) + ((sk / (6)) * sr)) - (((ku - (3)) / (24)) * ribelo.visby.math.sqrt(sr))));\n});\nvar G__50580__2 = (function (acc,p__50286){\nvar vec__50291 = p__50286;\nvar sr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50291,(0),null);\nvar sk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50291,(1),null);\nvar ku = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50291,(2),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,sr),sk),ku);\n});\nG__50580 = function(acc,p__50286){\nswitch(arguments.length){\ncase 0:\nreturn G__50580__0.call(this);\ncase 1:\nreturn G__50580__1.call(this,acc);\ncase 2:\nreturn G__50580__2.call(this,acc,p__50286);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50580.cljs$core$IFn$_invoke$arity$0 = G__50580__0;\nG__50580.cljs$core$IFn$_invoke$arity$1 = G__50580__1;\nG__50580.cljs$core$IFn$_invoke$arity$2 = G__50580__2;\nreturn G__50580;\n})()\n));\n});\n\nribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1(0.0);\n});\n\nribelo.visby.quant.adjusted_sharpe_ratio.cljs$lang$maxFixedArity = 1;\n\n/**\n * Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n * for negative skewness and excess kurtosis.\n */\nribelo.visby.quant.annualized_adjusted_sharpe_ratio = (function ribelo$visby$quant$annualized_adjusted_sharpe_ratio(var_args){\nvar G__50307 = arguments.length;\nswitch (G__50307) {\ncase 3:\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3 = (function (frisk,freq,mode){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.stats.skewness,ribelo.visby.stats.kurtosis,ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2(freq,mode),ribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$1(freq)], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50588 = null;\nvar G__50588__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50588__1 = (function (p__50312){\nvar vec__50316 = p__50312;\nvar sk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50316,(0),null);\nvar ku = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50316,(1),null);\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50316,(2),null);\nvar annrisk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50316,(3),null);\nvar sr = ((((function (){var G__50319 = ((10000) * annret);\nreturn Math.round(G__50319);\n})() / (10000)) - frisk) / ((function (){var G__50320 = ((10000) * annrisk);\nreturn Math.round(G__50320);\n})() / (10000)));\nreturn (sr * (((1) + ((sk / (6)) * sr)) - ((ku - (3)) * ribelo.visby.math.sqrt(sr))));\n});\nvar G__50588__2 = (function (acc,p__50313){\nvar vec__50322 = p__50313;\nvar sk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50322,(0),null);\nvar ku = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50322,(1),null);\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50322,(2),null);\nvar annrisk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50322,(3),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,sk),ku),annret),annrisk);\n});\nG__50588 = function(acc,p__50313){\nswitch(arguments.length){\ncase 0:\nreturn G__50588__0.call(this);\ncase 1:\nreturn G__50588__1.call(this,acc);\ncase 2:\nreturn G__50588__2.call(this,acc,p__50313);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50588.cljs$core$IFn$_invoke$arity$0 = G__50588__0;\nG__50588.cljs$core$IFn$_invoke$arity$1 = G__50588__1;\nG__50588.cljs$core$IFn$_invoke$arity$2 = G__50588__2;\nreturn G__50588;\n})()\n));\n});\n\nribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$2 = (function (frisk,freq){\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3(frisk,freq,new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463));\n});\n\nribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3(frisk,(252),new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463));\n});\n\nribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3(0.0,(252),new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463));\n});\n\nribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$lang$maxFixedArity = 3;\n\n/**\n * Downside Risk or Semi-Standard Deviation.\n * Measures the variability of underperformance below a minimum target rate\n */\nribelo.visby.quant.downside_risk = (function ribelo$visby$quant$downside_risk(var_args){\nvar G__50333 = arguments.length;\nswitch (G__50333) {\ncase 1:\nreturn ribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$1 = (function (mar){\nvar fnx = cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(ribelo.visby.emath.sub(mar),ribelo.visby.emath.min(0.0),ribelo.visby.emath.pow(2.0),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([net.cgrand.xforms.into.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY)], 0));\nvar fny = ((function (fnx){\nreturn (function() {\nvar G__50599 = null;\nvar G__50599__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50599__1 = (function (p__50335){\nvar vec__50337 = p__50335;\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50337,(0),null);\nvar count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50337,(1),null);\nvar sum = cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(ribelo.visby.emath.div(count),cljs.core._PLUS_,xs);\nreturn ribelo.visby.math.sqrt(sum);\n});\nvar G__50599__2 = (function (acc,p__50336){\nvar vec__50340 = p__50336;\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50340,(0),null);\nvar count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50340,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,xs),count);\n});\nG__50599 = function(acc,p__50336){\nswitch(arguments.length){\ncase 0:\nreturn G__50599__0.call(this);\ncase 1:\nreturn G__50599__1.call(this,acc);\ncase 2:\nreturn G__50599__2.call(this,acc,p__50336);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50599.cljs$core$IFn$_invoke$arity$0 = G__50599__0;\nG__50599.cljs$core$IFn$_invoke$arity$1 = G__50599__1;\nG__50599.cljs$core$IFn$_invoke$arity$2 = G__50599__2;\nreturn G__50599;\n})()\n;})(fnx))\n;\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fnx,net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(fny));\n});\n\nribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$1(0.0);\n});\n\nribelo.visby.quant.downside_risk.cljs$lang$maxFixedArity = 1;\n\n/**\n * Sortino ratio\n */\nribelo.visby.quant.sortino_ratio = (function ribelo$visby$quant$sortino_ratio(var_args){\nvar G__50347 = arguments.length;\nswitch (G__50347) {\ncase 2:\nreturn ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$2 = (function (frisk,mar){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$1(mar),ribelo.visby.stats.mean], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50601 = null;\nvar G__50601__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50601__1 = (function (p__50349){\nvar vec__50351 = p__50349;\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50351,(0),null);\nvar dr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50351,(1),null);\nreturn ((mean - frisk) / dr);\n});\nvar G__50601__2 = (function (acc,p__50350){\nvar vec__50354 = p__50350;\nvar dr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50354,(0),null);\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50354,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,mean),dr);\n});\nG__50601 = function(acc,p__50350){\nswitch(arguments.length){\ncase 0:\nreturn G__50601__0.call(this);\ncase 1:\nreturn G__50601__1.call(this,acc);\ncase 2:\nreturn G__50601__2.call(this,acc,p__50350);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50601.cljs$core$IFn$_invoke$arity$0 = G__50601__0;\nG__50601.cljs$core$IFn$_invoke$arity$1 = G__50601__1;\nG__50601.cljs$core$IFn$_invoke$arity$2 = G__50601__2;\nreturn G__50601;\n})()\n));\n});\n\nribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$2(frisk,0.0);\n});\n\nribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$2(0.0,0.0);\n});\n\nribelo.visby.quant.sortino_ratio.cljs$lang$maxFixedArity = 2;\n\n/**\n * Drawdowon from Peak. Any continuous losing return period.\n *   Return drawdown from peak and time to recovery array.\n */\nribelo.visby.quant.drawdown = cljs.core.comp.cljs$core$IFn$_invoke$arity$3(ribelo.visby.emath.add(1.0),ribelo.visby.emath.cumprod,(function (xf){\nvar val = cljs.core.volatile_BANG_(ribelo.visby.math.MIN_DOUBLE);\nreturn ((function (val){\nreturn (function() {\nvar G__50602 = null;\nvar G__50602__0 = (function (){\nreturn (xf.cljs$core$IFn$_invoke$arity$0 ? xf.cljs$core$IFn$_invoke$arity$0() : xf.call(null));\n});\nvar G__50602__1 = (function (acc){\nreturn (xf.cljs$core$IFn$_invoke$arity$1 ? xf.cljs$core$IFn$_invoke$arity$1(acc) : xf.call(null,acc));\n});\nvar G__50602__2 = (function (acc,x){\nvar val_SINGLEQUOTE_ = ribelo.visby.math.max(x,cljs.core.deref(val));\ncljs.core.vreset_BANG_(val,val_SINGLEQUOTE_);\n\nvar G__50379 = acc;\nvar G__50380 = ((val_SINGLEQUOTE_ - x) / val_SINGLEQUOTE_);\nreturn (xf.cljs$core$IFn$_invoke$arity$2 ? xf.cljs$core$IFn$_invoke$arity$2(G__50379,G__50380) : xf.call(null,G__50379,G__50380));\n});\nG__50602 = function(acc,x){\nswitch(arguments.length){\ncase 0:\nreturn G__50602__0.call(this);\ncase 1:\nreturn G__50602__1.call(this,acc);\ncase 2:\nreturn G__50602__2.call(this,acc,x);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50602.cljs$core$IFn$_invoke$arity$0 = G__50602__0;\nG__50602.cljs$core$IFn$_invoke$arity$1 = G__50602__1;\nG__50602.cljs$core$IFn$_invoke$arity$2 = G__50602__2;\nreturn G__50602;\n})()\n;})(val))\n}));\nribelo.visby.quant.continuous_drawdown = cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(cljs.core.neg_QMARK_),cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (p1__50381_SHARP_){\nreturn cljs.core.every_QMARK_(cljs.core.neg_QMARK_,p1__50381_SHARP_);\n})),(function (rf){\nreturn (function() {\nvar G__50603 = null;\nvar G__50603__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__50603__1 = (function (acc){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(acc) : rf.call(null,acc));\n});\nvar G__50603__2 = (function (acc,x){\nvar G__50383 = acc;\nvar G__50384 = ((1) - cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (G__50383){\nreturn (function (p1__50382_SHARP_){\nreturn ((1) + p1__50382_SHARP_);\n});})(G__50383))\n),cljs.core._STAR_,x));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__50383,G__50384) : rf.call(null,G__50383,G__50384));\n});\nG__50603 = function(acc,x){\nswitch(arguments.length){\ncase 0:\nreturn G__50603__0.call(this);\ncase 1:\nreturn G__50603__1.call(this,acc);\ncase 2:\nreturn G__50603__2.call(this,acc,x);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50603.cljs$core$IFn$_invoke$arity$0 = G__50603__0;\nG__50603.cljs$core$IFn$_invoke$arity$1 = G__50603__1;\nG__50603.cljs$core$IFn$_invoke$arity$2 = G__50603__2;\nreturn G__50603;\n})()\n}));\nribelo.visby.quant.average_drawdown = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.quant.continuous_drawdown,ribelo.visby.stats.mean);\nribelo.visby.quant.maximum_drawdown = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.quant.continuous_drawdown,ribelo.visby.stats.max);\n/**\n * Simple rate of return calculated from the last and the first value of\n *   an array of numbers.\n */\nribelo.visby.quant.rate_of_return = cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(ribelo.visby.emath.add(1.0),net.cgrand.xforms.reductions.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_),net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(net.cgrand.xforms.rfs.some),net.cgrand.xforms.last], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50604 = null;\nvar G__50604__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50604__1 = (function (p__50386){\nvar vec__50388 = p__50386;\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50388,(0),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50388,(1),null);\nreturn ((l / f) - 1.0);\n});\nvar G__50604__2 = (function (acc,p__50387){\nvar vec__50391 = p__50387;\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50391,(0),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50391,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,f),l);\n});\nG__50604 = function(acc,p__50387){\nswitch(arguments.length){\ncase 0:\nreturn G__50604__0.call(this);\ncase 1:\nreturn G__50604__1.call(this,acc);\ncase 2:\nreturn G__50604__2.call(this,acc,p__50387);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50604.cljs$core$IFn$_invoke$arity$0 = G__50604__0;\nG__50604.cljs$core$IFn$_invoke$arity$1 = G__50604__1;\nG__50604.cljs$core$IFn$_invoke$arity$2 = G__50604__2;\nreturn G__50604;\n})()\n)], 0));\n/**\n * Compound annual growth rate\n */\nribelo.visby.quant.cagr = (function ribelo$visby$quant$cagr(var_args){\nvar G__50398 = arguments.length;\nswitch (G__50398) {\ncase 1:\nreturn ribelo.visby.quant.cagr.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.cagr.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.cagr.cljs$core$IFn$_invoke$arity$1 = (function (n){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(ribelo.visby.quant.rate_of_return,ribelo.visby.emath.add(1.0),ribelo.visby.emath.pow((1.0 / n)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ribelo.visby.emath.sub(1.0)], 0));\n});\n\nribelo.visby.quant.cagr.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.rate_of_return;\n});\n\nribelo.visby.quant.cagr.cljs$lang$maxFixedArity = 1;\n\n/**\n * A risk-adjusted measure like Sharpe ratio that uses maximum drawdown instead of\n *   standard deviation for risk.\n */\nribelo.visby.quant.calmar_ratio = (function ribelo$visby$quant$calmar_ratio(var_args){\nvar G__50415 = arguments.length;\nswitch (G__50415) {\ncase 2:\nreturn ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$2 = (function (frisk,freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2(freq,new cljs.core.Keyword(null,\"geometric\",\"geometric\",956143463)),ribelo.visby.quant.maximum_drawdown], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50607 = null;\nvar G__50607__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50607__1 = (function (p__50416){\nvar vec__50418 = p__50416;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50418,(0),null);\nvar maxdd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50418,(1),null);\nreturn ((annret - frisk) / maxdd);\n});\nvar G__50607__2 = (function (acc,p__50417){\nvar vec__50421 = p__50417;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50421,(0),null);\nvar maxdd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50421,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,annret),maxdd);\n});\nG__50607 = function(acc,p__50417){\nswitch(arguments.length){\ncase 0:\nreturn G__50607__0.call(this);\ncase 1:\nreturn G__50607__1.call(this,acc);\ncase 2:\nreturn G__50607__2.call(this,acc,p__50417);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50607.cljs$core$IFn$_invoke$arity$0 = G__50607__0;\nG__50607.cljs$core$IFn$_invoke$arity$1 = G__50607__1;\nG__50607.cljs$core$IFn$_invoke$arity$2 = G__50607__2;\nreturn G__50607;\n})()\n));\n});\n\nribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$2(frisk,(252));\n});\n\nribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$2(0.0,(252));\n});\n\nribelo.visby.quant.calmar_ratio.cljs$lang$maxFixedArity = 2;\n\nribelo.visby.quant.downside_potential = (function ribelo$visby$quant$downside_potential(var_args){\nvar G__50425 = arguments.length;\nswitch (G__50425) {\ncase 1:\nreturn ribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$1 = (function (mar){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(ribelo.visby.emath.mul(-1.0),ribelo.visby.emath.add(mar),ribelo.visby.emath.max(0.0),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([net.cgrand.xforms.into.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY)], 0)),net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50609 = null;\nvar G__50609__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50609__1 = (function (p__50426){\nvar vec__50428 = p__50426;\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50428,(0),null);\nvar count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50428,(1),null);\nreturn cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(ribelo.visby.emath.div(count),cljs.core._PLUS_,xs);\n});\nvar G__50609__2 = (function (acc,p__50427){\nvar vec__50455 = p__50427;\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50455,(0),null);\nvar count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50455,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,xs),count);\n});\nG__50609 = function(acc,p__50427){\nswitch(arguments.length){\ncase 0:\nreturn G__50609__0.call(this);\ncase 1:\nreturn G__50609__1.call(this,acc);\ncase 2:\nreturn G__50609__2.call(this,acc,p__50427);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50609.cljs$core$IFn$_invoke$arity$0 = G__50609__0;\nG__50609.cljs$core$IFn$_invoke$arity$1 = G__50609__1;\nG__50609.cljs$core$IFn$_invoke$arity$2 = G__50609__2;\nreturn G__50609;\n})()\n));\n});\n\nribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$1(0.0);\n});\n\nribelo.visby.quant.downside_potential.cljs$lang$maxFixedArity = 1;\n\n/**\n * A risk-adjusted measure with free risk and drawdowns.\n * For the 'simple' mode the excess return over free risk is divided by the square root of\n * the sum of the square of the drawdowns. For the 'modified' mode the Burke Ratio is multiplied\n * by the square root of the number of datas.\n */\nribelo.visby.quant.burke_ratio = (function ribelo$visby$quant$burke_ratio(var_args){\nvar G__50459 = arguments.length;\nswitch (G__50459) {\ncase 3:\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3 = (function (frisk,freq,mode){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$1(freq),cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(ribelo.visby.quant.continuous_drawdown,ribelo.visby.emath.pow((2)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(cljs.core._PLUS_),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ribelo.visby.emath.sqrt], 0)),net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50616 = null;\nvar G__50616__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50616__1 = (function (p__50460){\nvar vec__50462 = p__50460;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50462,(0),null);\nvar dd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50462,(1),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50462,(2),null);\nvar G__50465 = mode;\nvar G__50465__$1 = (((G__50465 instanceof cljs.core.Keyword))?G__50465.fqn:null);\nswitch (G__50465__$1) {\ncase \"simple\":\nreturn ((annret - frisk) / dd);\n\nbreak;\ncase \"modified\":\nreturn (((annret - frisk) / dd) * ribelo.visby.math.sqrt(c));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__50465__$1)].join('')));\n\n}\n});\nvar G__50616__2 = (function (acc,p__50461){\nvar vec__50466 = p__50461;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50466,(0),null);\nvar dd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50466,(1),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50466,(2),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,annret),dd),c);\n});\nG__50616 = function(acc,p__50461){\nswitch(arguments.length){\ncase 0:\nreturn G__50616__0.call(this);\ncase 1:\nreturn G__50616__1.call(this,acc);\ncase 2:\nreturn G__50616__2.call(this,acc,p__50461);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50616.cljs$core$IFn$_invoke$arity$0 = G__50616__0;\nG__50616.cljs$core$IFn$_invoke$arity$1 = G__50616__1;\nG__50616.cljs$core$IFn$_invoke$arity$2 = G__50616__2;\nreturn G__50616;\n})()\n));\n});\n\nribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$2 = (function (frisk,freq){\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3(frisk,freq,new cljs.core.Keyword(null,\"simple\",\"simple\",-581868663));\n});\n\nribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3(frisk,(252),new cljs.core.Keyword(null,\"simple\",\"simple\",-581868663));\n});\n\nribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3(0.0,(252),new cljs.core.Keyword(null,\"simple\",\"simple\",-581868663));\n});\n\nribelo.visby.quant.burke_ratio.cljs$lang$maxFixedArity = 3;\n\n/**\n * Ulcer Index of Peter G. Martin (1987). The impact of long, deep drawdowns will have significant\n *   impact because the underperformance since the last peak is squared.\n */\nribelo.visby.quant.ulcer_index = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$3(ribelo.visby.quant.drawdown,ribelo.visby.emath.pow((2)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(cljs.core._PLUS_)),net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50618 = null;\nvar G__50618__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50618__1 = (function (p__50473){\nvar vec__50475 = p__50473;\nvar dd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50475,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50475,(1),null);\nreturn ribelo.visby.math.sqrt((dd / c));\n});\nvar G__50618__2 = (function (acc,p__50474){\nvar vec__50478 = p__50474;\nvar dd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50478,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50478,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,dd),c);\n});\nG__50618 = function(acc,p__50474){\nswitch(arguments.length){\ncase 0:\nreturn G__50618__0.call(this);\ncase 1:\nreturn G__50618__1.call(this,acc);\ncase 2:\nreturn G__50618__2.call(this,acc,p__50474);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50618.cljs$core$IFn$_invoke$arity$0 = G__50618__0;\nG__50618.cljs$core$IFn$_invoke$arity$1 = G__50618__1;\nG__50618.cljs$core$IFn$_invoke$arity$2 = G__50618__2;\nreturn G__50618;\n})()\n));\n/**\n * A risk-adjusted measure with free risk and Ulcer index.\n * Martin Ratio = (Portfolio Return - RiskFree) / Ulcer Index\n * Mode: :return, :geometric (default: :return)\n */\nribelo.visby.quant.martin_ratio = (function ribelo$visby$quant$martin_ratio(var_args){\nvar G__50482 = arguments.length;\nswitch (G__50482) {\ncase 2:\nreturn ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$2 = (function (frisk,freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$1(freq),ribelo.visby.quant.ulcer_index], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50625 = null;\nvar G__50625__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50625__1 = (function (p__50483){\nvar vec__50486 = p__50483;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50486,(0),null);\nvar u = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50486,(1),null);\nreturn ((annret - frisk) / u);\n});\nvar G__50625__2 = (function (acc,p__50484){\nvar vec__50489 = p__50484;\nvar annret = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50489,(0),null);\nvar u = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50489,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,annret),u);\n});\nG__50625 = function(acc,p__50484){\nswitch(arguments.length){\ncase 0:\nreturn G__50625__0.call(this);\ncase 1:\nreturn G__50625__1.call(this,acc);\ncase 2:\nreturn G__50625__2.call(this,acc,p__50484);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50625.cljs$core$IFn$_invoke$arity$0 = G__50625__0;\nG__50625.cljs$core$IFn$_invoke$arity$1 = G__50625__1;\nG__50625.cljs$core$IFn$_invoke$arity$2 = G__50625__2;\nreturn G__50625;\n})()\n));\n});\n\nribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$1 = (function (frisk){\nreturn ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$2(frisk,(252));\n});\n\nribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$2(0.0,(252));\n});\n\nribelo.visby.quant.martin_ratio.cljs$lang$maxFixedArity = 2;\n\n/**\n * It's a useful statistic for detecting if a time series is mean reverting (anti-persistent), totally random or persistent.\n * A value in the range [0.5) indicates mean-reverting (anti-persistent)\n * A value of 0.5 indicate a random walk\n * A value H in the range (0.5,1] indicates momentum (persistent)\n */\nribelo.visby.quant.hurst_index = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.cumdev,ribelo.visby.stats.max),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.cumdev,ribelo.visby.stats.min),ribelo.visby.stats.std,net.cgrand.xforms.count], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50626 = null;\nvar G__50626__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50626__1 = (function (p__50495){\nvar vec__50497 = p__50495;\nvar mx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50497,(0),null);\nvar mn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50497,(1),null);\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50497,(2),null);\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50497,(3),null);\nvar rs = ((mx - mn) / std);\nreturn (ribelo.visby.math.log(rs) / ribelo.visby.math.log(n));\n});\nvar G__50626__2 = (function (acc,p__50496){\nvar vec__50503 = p__50496;\nvar mx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50503,(0),null);\nvar mn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50503,(1),null);\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50503,(2),null);\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50503,(3),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,mx),mn),std),n);\n});\nG__50626 = function(acc,p__50496){\nswitch(arguments.length){\ncase 0:\nreturn G__50626__0.call(this);\ncase 1:\nreturn G__50626__1.call(this,acc);\ncase 2:\nreturn G__50626__2.call(this,acc,p__50496);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50626.cljs$core$IFn$_invoke$arity$0 = G__50626__0;\nG__50626.cljs$core$IFn$_invoke$arity$1 = G__50626__1;\nG__50626.cljs$core$IFn$_invoke$arity$2 = G__50626__2;\nreturn G__50626;\n})()\n));\n/**\n * Information Ratio\n */\nribelo.visby.quant.info_ratio = (function ribelo$visby$quant$info_ratio(xs){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.sub(xs),ribelo.visby.stats.std),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.sub(xs),ribelo.visby.stats.mean)], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50627 = null;\nvar G__50627__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50627__1 = (function (p__50506){\nvar vec__50508 = p__50506;\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50508,(0),null);\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50508,(1),null);\nreturn (mean / std);\n});\nvar G__50627__2 = (function (acc,p__50507){\nvar vec__50511 = p__50507;\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50511,(0),null);\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50511,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [std,mean], null);\n});\nG__50627 = function(acc,p__50507){\nswitch(arguments.length){\ncase 0:\nreturn G__50627__0.call(this);\ncase 1:\nreturn G__50627__1.call(this,acc);\ncase 2:\nreturn G__50627__2.call(this,acc,p__50507);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50627.cljs$core$IFn$_invoke$arity$0 = G__50627__0;\nG__50627.cljs$core$IFn$_invoke$arity$1 = G__50627__1;\nG__50627.cljs$core$IFn$_invoke$arity$2 = G__50627__2;\nreturn G__50627;\n})()\n));\n});\n/**\n * Ex-post alpha calculated with regression line.\n *   Free-risk is the avereage free-risk for the timeframe selected.\n */\nribelo.visby.quant.jensen_alpha = (function ribelo$visby$quant$jensen_alpha(xs,frisk){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.sub(xs),ribelo.visby.stats.std),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(ribelo.visby.emath.sub(xs),ribelo.visby.stats.mean)], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50640 = null;\nvar G__50640__0 = (function (){\nreturn cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\n});\nvar G__50640__1 = (function (p__50514){\nvar vec__50516 = p__50514;\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50516,(0),null);\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50516,(1),null);\nreturn (mean / std);\n});\nvar G__50640__2 = (function (acc,p__50515){\nvar vec__50519 = p__50515;\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50519,(0),null);\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50519,(1),null);\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,std),mean);\n});\nG__50640 = function(acc,p__50515){\nswitch(arguments.length){\ncase 0:\nreturn G__50640__0.call(this);\ncase 1:\nreturn G__50640__1.call(this,acc);\ncase 2:\nreturn G__50640__2.call(this,acc,p__50515);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50640.cljs$core$IFn$_invoke$arity$0 = G__50640__0;\nG__50640.cljs$core$IFn$_invoke$arity$1 = G__50640__1;\nG__50640.cljs$core$IFn$_invoke$arity$2 = G__50640__2;\nreturn G__50640;\n})()\n));\n});\n/**\n * Modigliani index for risk-adjusted return\n */\nribelo.visby.quant.modigliani = (function ribelo$visby$quant$modigliani(ys,frisk){\nvar vec__50523 = cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(ribelo.visby.stats.std,ys);\nvar stdb = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50523,(0),null);\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.stats.mean,ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1(frisk),ribelo.visby.stats.std], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1(((function (vec__50523,stdb){\nreturn (function() {\nvar G__50642 = null;\nvar G__50642__0 = (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,0.0,0.0], null);\n});\nvar G__50642__1 = (function (p__50527){\nvar vec__50528 = p__50527;\nvar mean = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50528,(0),null);\nvar sharpe = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50528,(1),null);\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50528,(2),null);\nreturn (mean + (sharpe * (stdb - std)));\n});\nvar G__50642__2 = (function (acc,coll){\nreturn coll;\n});\nG__50642 = function(acc,coll){\nswitch(arguments.length){\ncase 0:\nreturn G__50642__0.call(this);\ncase 1:\nreturn G__50642__1.call(this,acc);\ncase 2:\nreturn G__50642__2.call(this,acc,coll);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50642.cljs$core$IFn$_invoke$arity$0 = G__50642__0;\nG__50642.cljs$core$IFn$_invoke$arity$1 = G__50642__1;\nG__50642.cljs$core$IFn$_invoke$arity$2 = G__50642__2;\nreturn G__50642;\n})()\n;})(vec__50523,stdb))\n));\n});\nribelo.visby.quant.rolling_economic_drawndown = (function ribelo$visby$quant$rolling_economic_drawndown(var_args){\nvar G__50536 = arguments.length;\nswitch (G__50536) {\ncase 1:\nreturn ribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 0:\nreturn ribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$1 = (function (freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [net.cgrand.xforms.take_last(freq),ribelo.visby.stats.max], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50644 = null;\nvar G__50644__0 = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,0.0], null);\n});\nvar G__50644__1 = (function (p__50543){\nvar vec__50544 = p__50543;\nvar data = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50544,(0),null);\nvar high = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50544,(1),null);\nreturn (1.0 - (data / high));\n});\nvar G__50644__2 = (function (acc,coll){\nreturn coll;\n});\nG__50644 = function(acc,coll){\nswitch(arguments.length){\ncase 0:\nreturn G__50644__0.call(this);\ncase 1:\nreturn G__50644__1.call(this,acc);\ncase 2:\nreturn G__50644__2.call(this,acc,coll);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50644.cljs$core$IFn$_invoke$arity$0 = G__50644__0;\nG__50644.cljs$core$IFn$_invoke$arity$1 = G__50644__1;\nG__50644.cljs$core$IFn$_invoke$arity$2 = G__50644__2;\nreturn G__50644;\n})()\n));\n});\n\nribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$1((254));\n});\n\nribelo.visby.quant.rolling_economic_drawndown.cljs$lang$maxFixedArity = 1;\n\nribelo.visby.quant.redp_allocation = (function ribelo$visby$quant$redp_allocation(var_args){\nvar G__50551 = arguments.length;\nswitch (G__50551) {\ncase 2:\nreturn ribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn ribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$2 = (function (risk,freq){\nreturn cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$1(freq),ribelo.visby.stats.std,ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1(0.0)], null)),net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1((function() {\nvar G__50646 = null;\nvar G__50646__0 = (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,0.0,0.0], null);\n});\nvar G__50646__1 = (function (p__50553){\nvar vec__50554 = p__50553;\nvar redp = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50554,(0),null);\nvar std = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50554,(1),null);\nvar sharpe_ratio = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50554,(2),null);\nreturn ribelo.visby.math.min(1.0,ribelo.visby.math.max(0.0,((((sharpe_ratio / std) + 0.5) / (1.0 - ribelo.visby.math.pow(risk,2.0))) * ribelo.visby.math.max(0.0,((risk - redp) / (1.0 - redp))))));\n});\nvar G__50646__2 = (function (acc,coll){\nreturn coll;\n});\nG__50646 = function(acc,coll){\nswitch(arguments.length){\ncase 0:\nreturn G__50646__0.call(this);\ncase 1:\nreturn G__50646__1.call(this,acc);\ncase 2:\nreturn G__50646__2.call(this,acc,coll);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50646.cljs$core$IFn$_invoke$arity$0 = G__50646__0;\nG__50646.cljs$core$IFn$_invoke$arity$1 = G__50646__1;\nG__50646.cljs$core$IFn$_invoke$arity$2 = G__50646__2;\nreturn G__50646;\n})()\n));\n});\n\nribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$1 = (function (risk){\nreturn ribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$2(risk,(254));\n});\n\nribelo.visby.quant.redp_allocation.cljs$lang$maxFixedArity = 2;\n\n/**\n * Convert a value series to a return series\n */\nribelo.visby.quant.tick__GT_ret = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(net.cgrand.xforms.partition.cljs$core$IFn$_invoke$arity$2((2),(1)),(function (rf){\nreturn (function() {\nvar G__50650 = null;\nvar G__50650__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__50650__1 = (function (acc){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(acc) : rf.call(null,acc));\n});\nvar G__50650__2 = (function (acc,p__50557){\nvar vec__50558 = p__50557;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50558,(0),null);\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50558,(1),null);\nvar G__50561 = acc;\nvar G__50562 = ((y / x) - 1.0);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__50561,G__50562) : rf.call(null,G__50561,G__50562));\n});\nG__50650 = function(acc,p__50557){\nswitch(arguments.length){\ncase 0:\nreturn G__50650__0.call(this);\ncase 1:\nreturn G__50650__1.call(this,acc);\ncase 2:\nreturn G__50650__2.call(this,acc,p__50557);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__50650.cljs$core$IFn$_invoke$arity$0 = G__50650__0;\nG__50650.cljs$core$IFn$_invoke$arity$1 = G__50650__1;\nG__50650.cljs$core$IFn$_invoke$arity$2 = G__50650__2;\nreturn G__50650;\n})()\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ribelo/visby/quant.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ribelo.visby.quant","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$x","~$net.cgrand.xforms","~$ribelo.visby.stats","^J","^>","^?","~$math","~$ribelo.visby.math","~$stats","^J","~$rf","~$net.cgrand.xforms.rfs","~$cljs.core","^P","~$goog","^Q","^L","^L","~$s","^?","~$emath","~$ribelo.visby.emath","^S","^S","^?","^?","^O","^O","^I","^I"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P","~$x","^I","^>","^?","^N","^O","~$s","^?","^?","^?","^O","^O","^I","^I"],"~:form",["~#list",["~$ns","^D",["^Y",["^U",["^>","~:as","~$s"],["^I","^[","~$x"],["^O","^[","^N"],["^L","^[","^K"],["^S","^[","^R"],["^J","^[","^M"]]]]],"~:flags",["^ ","^U",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^?","^I","^O","^L","^S","^J"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","ribelo/visby/quant.cljc"],"~:compiled-at",1551533704986,"~:resource-name","ribelo/visby/quant.cljc","~:warnings",[],"~:source","(ns ribelo.visby.quant\n  (:require [clojure.spec.alpha :as s]\n            [net.cgrand.xforms :as x]\n            [net.cgrand.xforms.rfs :as rf]\n            [ribelo.visby.math :as math]\n            [ribelo.visby.emath :as emath]\n            [ribelo.visby.stats :as stats]))\n\n\n(defn ann-return-geometric\n  ([^long freq]\n   (comp\n     (x/transjuxt [(comp (emath/add 1.0) (x/reduce *)) x/count])\n     (x/reduce\n       (fn\n         ([] [0.0 0.0])\n         ([[x n]] (- (math/pow x (/ freq n)) 1.0))\n         ([acc [x n]] [x n])))))\n  ([] (ann-return-geometric 252)))\n\n\n(defn ann-return-simple\n  ([^long freq]\n   (comp\n     stats/mean\n     (emath/mul freq)))\n  ([] (ann-return-simple 252)))\n\n\n(defn annualized-return\n  \"Average annualized returns over a period, convenient when comparing returns.\n  It can be an Arithmetic or Geometric (default) average return: if compounded with itself the\n  geometric average will be equal to the cumulative return\"\n  ([^long freq mode]\n   (case mode\n     :geometric (ann-return-geometric freq)\n     :simple (ann-return-simple freq)))\n  ([^long freq]\n   (annualized-return freq :geometric))\n  ([]\n   (annualized-return 252 :geometric)))\n\n\n(defn active-return\n  \"Asset/Portfolio annualized return minus Benchmark annualized return\"\n  ([xs freq mode]\n   (let [xs' (sequence (annualized-return freq mode) xs)]\n     (comp\n       (annualized-return freq mode)\n       (emath/sub xs')))))\n\n\n(defn annualized-risk\n  \"Annualized standard deviation of asset/portfolio returns\"\n  ([freq]\n   (comp\n     stats/std\n     (emath/mul (math/sqrt freq))))\n  ([] (annualized-risk 252)))\n\n\n(defn sharpe-ratio\n  \"Sharpe Ratio.Compute Sharpe ratio for an collection XS of values (daily, weekly, etc) and\n   a free-risk rate. Annual free-risk must be divided to match the right timeframe.\"\n  ([^double frisk]\n   (comp\n     (x/transjuxt [stats/mean stats/std])\n     (x/reduce\n       (fn\n         ([] [0.0 0.0])\n         ([[mean std]] (/ (- mean frisk) std))\n         ([acc coll] coll)))))\n  ([] (sharpe-ratio 0.0)))\n\n\n(defn adjusted-sharpe-ratio\n  \"Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis.\"\n  ([^double frisk]\n   (comp\n     (x/transjuxt [(sharpe-ratio frisk) stats/skewness stats/kurtosis])\n     (x/reduce\n       (fn\n         ([] (transient []))\n         ([[sr sk ku]] (* sr (- (+ 1 (* (/ sk 6) sr))\n                                (* (/ (- ku 3) 24) (math/sqrt sr)))))\n         ([acc [sr sk ku]] (-> acc (conj! sr) (conj! sk) (conj! ku)))))))\n  ([] (adjusted-sharpe-ratio 0.0)))\n\n\n(defn annualized-adjusted-sharpe-ratio\n  \"Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis.\"\n  ([^double frisk ^long freq mode]\n   (comp\n     (x/transjuxt [stats/skewness stats/kurtosis\n                   (annualized-return freq mode) (annualized-risk freq)])\n     (x/reduce\n       (fn\n         ([] (transient []))\n         ([[sk ku annret annrisk]]\n          (let [sr (/ (- (/ (Math/round ^double (* 10000 annret)) 10000) frisk)\n                      (/ (Math/round ^double (* 10000 annrisk)) 10000))]\n            (* sr (- (+ 1 (* (/ sk 6) sr))\n                     (* (- ku 3) (math/sqrt sr))))))\n         ([acc [sk ku annret annrisk]]\n          (-> acc (conj! sk) (conj! ku) (conj! annret) (conj! annrisk)))))))\n  ([^double frisk ^long freq]\n   (annualized-adjusted-sharpe-ratio frisk freq :geometric))\n  ([^double frisk]\n   (annualized-adjusted-sharpe-ratio frisk 252 :geometric))\n  ([]\n   (annualized-adjusted-sharpe-ratio 0.0 252 :geometric)))\n\n\n(defn downside-risk\n  \"Downside Risk or Semi-Standard Deviation.\n   Measures the variability of underperformance below a minimum target rate\"\n  ([^double mar]\n   (let [fnx (comp\n               (emath/sub mar)\n               (emath/min 0.0)\n               (emath/pow 2.0)\n               (x/into []))\n         fny (fn\n               ([] (transient []))\n               ([[xs count]]\n                (let [sum (transduce (emath/div count) + xs)]\n                  (math/sqrt ^double sum)))\n               ([acc [xs count]] (-> acc (conj! xs) (conj! count))))]\n     (comp\n       (x/transjuxt [fnx x/count])\n       (x/reduce fny)\n       )))\n  ([] (downside-risk 0.0)))\n\n\n(defn sortino-ratio\n  \"Sortino ratio\"\n  ([^double frisk ^double mar]\n   (comp\n     (x/transjuxt [(downside-risk mar) stats/mean])\n     (x/reduce\n       (fn\n         ([] (transient []))\n         ([[mean dr]] (/ (- mean frisk) dr))\n         ([acc [dr mean]] (-> acc (conj! mean) (conj! dr)))))))\n  ([^double frisk] (sortino-ratio frisk 0.0))\n  ([] (sortino-ratio 0.0 0.0)))\n\n\n(def drawdown\n  \"Drawdowon from Peak. Any continuous losing return period.\n  Return drawdown from peak and time to recovery array.\"\n  (comp\n    (emath/add 1.0)\n    emath/cumprod\n    (fn [xf]\n      (let [val (volatile! math/MIN-DOUBLE)]\n        (fn\n          ([] (xf))\n          ([acc] (xf acc))\n          ([acc x]\n           (let [val' (math/max x @val)]\n             (vreset! val val')\n             (xf acc (/ (- val' x) val')))))))))\n\n\n(def continuous-drawdown\n  (comp\n    (partition-by neg?)\n    (filter #(every? neg? %))\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([acc] (rf acc))\n        ([acc x] (rf acc (- 1 (transduce (map #(+ 1 %)) * x))))))))\n\n\n(def average-drawdown\n  (comp continuous-drawdown\n        stats/mean))\n\n\n(def maximum-drawdown\n  (comp continuous-drawdown\n        stats/max))\n\n\n(def rate-of-return\n  \"Simple rate of return calculated from the last and the first value of\n  an array of numbers.\"\n  (comp (emath/add 1.0)\n        (x/reductions *)\n        (x/transjuxt [(x/reduce rf/some)\n                      x/last])\n        (x/reduce\n          (fn\n            ([] (transient []))\n            ([[f l]] (- (/ l f) 1.0))\n            ([acc [f l]] (-> acc (conj! f) (conj! l)))))))\n\n\n(defn cagr\n  \"Compound annual growth rate\"\n  ([n]\n   (comp rate-of-return\n         (emath/add 1.0)\n         (emath/pow (/ 1.0 n))\n         (emath/sub 1.0)))\n  ([] rate-of-return))\n\n\n(defn calmar-ratio\n  \"A risk-adjusted measure like Sharpe ratio that uses maximum drawdown instead of\n  standard deviation for risk.\"\n  ([^double frisk ^long freq]\n   (comp (x/transjuxt [(annualized-return freq :geometric) maximum-drawdown])\n         (x/reduce\n           (fn\n             ([] (transient []))\n             ([[annret maxdd]] (/ (- annret frisk) maxdd))\n             ([acc [annret maxdd]] (-> acc (conj! annret) (conj! maxdd)))))))\n  ([frisk]\n   (calmar-ratio frisk 252))\n  ([]\n   (calmar-ratio 0.0 252)))\n\n\n(defn downside-potential\n  ([mar]\n   (comp (x/transjuxt [(comp (emath/mul -1.0) (emath/add mar) (emath/max 0.0) (x/into [])) x/count])\n         (x/reduce\n           (fn\n             ([] (transient []))\n             ([[xs count]] (transduce (emath/div count) + xs))\n             ([acc [xs count]] (-> acc (conj! xs) (conj! count)))))))\n  ([] (downside-potential 0.0)))\n\n\n(defn burke-ratio\n  \"A risk-adjusted measure with free risk and drawdowns.\n   For the 'simple' mode the excess return over free risk is divided by the square root of\n   the sum of the square of the drawdowns. For the 'modified' mode the Burke Ratio is multiplied\n   by the square root of the number of datas.\"\n  ([frisk freq mode]\n   (comp\n     (x/transjuxt [(annualized-return freq)\n                   (comp continuous-drawdown\n                         (emath/pow 2)\n                         (x/reduce +)\n                         emath/sqrt)\n                   x/count])\n     (x/reduce\n       (fn\n         ([] (transient []))\n         ([[annret dd c]] (case mode\n                            :simple (/ (- annret frisk) dd)\n                            :modified (* (/ (- annret frisk) dd)\n                                         (math/sqrt c))))\n         ([acc [annret dd c]] (-> acc\n                                  (conj! annret)\n                                  (conj! dd)\n                                  (conj! c)))))))\n  ([frisk freq]\n   (burke-ratio frisk freq :simple))\n  ([frisk]\n   (burke-ratio frisk 252 :simple))\n  ([]\n   (burke-ratio 0.0 252 :simple)))\n\n\n(def ulcer-index\n  \"Ulcer Index of Peter G. Martin (1987). The impact of long, deep drawdowns will have significant\n  impact because the underperformance since the last peak is squared.\"\n  (comp\n    (x/transjuxt [(comp drawdown\n                        (emath/pow 2)\n                        (x/reduce +))\n                  x/count])\n    (x/reduce\n      (fn\n        ([] (transient []))\n        ([[dd c]] (math/sqrt (/ dd c)))\n        ([acc [dd c]] (-> acc (conj! dd) (conj! c)))))))\n\n\n(defn martin-ratio\n  \"A risk-adjusted measure with free risk and Ulcer index.\n   Martin Ratio = (Portfolio Return - RiskFree) / Ulcer Index\n   Mode: :return, :geometric (default: :return)\"\n  ([frisk freq]\n   (comp\n     (x/transjuxt [(annualized-return freq)\n                   ulcer-index])\n     (x/reduce\n       (fn\n         ([] (transient []))\n         ([[annret u]] (/ (- annret frisk) u))\n         ([acc [annret u]] (-> acc (conj! annret) (conj! u)))))))\n  ([frisk]\n   (martin-ratio frisk 252))\n  ([]\n   (martin-ratio 0.0 252)))\n\n\n(def hurst-index\n  \"It's a useful statistic for detecting if a time series is mean reverting (anti-persistent), totally random or persistent.\n   A value in the range [0.5) indicates mean-reverting (anti-persistent)\n   A value of 0.5 indicate a random walk\n   A value H in the range (0.5,1] indicates momentum (persistent)\"\n  (comp\n    (x/transjuxt [(comp emath/cumdev stats/max)\n                  (comp emath/cumdev stats/min)\n                  stats/std\n                  x/count])\n    (x/reduce\n      (fn\n        ([] (transient []))\n        ([[mx mn std n]]\n         (let [rs (/ (- mx mn) std)]\n           (/ (math/log rs) (math/log n))))\n        ([acc [mx mn std n]] (-> acc\n                                 (conj! mx) (conj! mn)\n                                 (conj! std) (conj! n)))))))\n\n\n(defn info-ratio\n  \"Information Ratio\"\n  [xs]\n  (comp\n    (x/transjuxt [(comp (emath/sub xs) stats/std)\n                  (comp (emath/sub xs) stats/mean)])\n    (x/reduce\n      (fn\n        ([] (transient []))\n        ([[std mean]] (/ mean std))\n        ([acc [std mean]] [std mean])))))\n\n\n(defn jensen-alpha\n  \"Ex-post alpha calculated with regression line.\n  Free-risk is the avereage free-risk for the timeframe selected.\"\n  [xs frisk]\n  (comp\n    (x/transjuxt [(comp (emath/sub xs) stats/std)\n                  (comp (emath/sub xs) stats/mean)])\n    (x/reduce\n      (fn\n        ([] (transient []))\n        ([[std mean]]\n         (/ mean std))\n        ([acc [std mean]] (-> acc (conj! std) (conj! mean)))))))\n\n\n(defn modigliani\n  \"Modigliani index for risk-adjusted return\"\n  [ys frisk]\n  (let [[stdb] (sequence stats/std ys)]\n    (comp\n      (x/transjuxt [stats/mean\n                    (sharpe-ratio frisk)\n                    stats/std])\n      (x/reduce\n        (fn\n          ([] [0.0 0.0 0.0])\n          ([[mean sharpe std]]\n           (+ mean (* sharpe (- stdb std))))\n          ([acc coll] coll))))))\n\n\n(defn rolling-economic-drawndown\n  ([freq]\n   (comp\n     (x/transjuxt [(x/take-last freq)\n                   stats/max])\n     (x/reduce\n       (fn\n         ([] [0.0 0.0])\n         ([[data high]] (- 1.0 (/ data high)))\n         ([acc coll] coll)))))\n  ([]\n   (rolling-economic-drawndown 254)))\n\n\n(defn redp-allocation\n  ([risk freq]\n   (comp\n     (x/transjuxt [(rolling-economic-drawndown freq)\n                   stats/std\n                   (sharpe-ratio 0.0)])\n     (x/reduce\n       (fn\n         ([] [0.0 0.0 0.0])\n         ([[redp std sharpe-ratio]]\n          (math/min 1.0\n                    (math/max 0.0 (* (/ (+ (/ sharpe-ratio std) 0.5)\n                                        (- 1.0 (math/pow risk 2.0)))\n                                     (math/max 0.0 (/ (- risk redp)\n                                                      (- 1.0 redp)))))))\n         ([acc coll] coll)))))\n  ([risk]\n   (redp-allocation risk 254)))\n\n\n(def tick->ret\n  \"Convert a value series to a return series\"\n  (comp (x/partition 2 1)\n        (fn [rf]\n          (fn\n            ([] (rf))\n            ([acc] (rf acc))\n            ([acc [x y]] (rf acc (- (/ y x) 1.0)))))))","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__50243","ribelo.visby.quant/ann-return-geometric","js/Error","freq","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","net.cgrand.xforms.transjuxt.cljs$core$IFn$_invoke$arity$1","ribelo.visby.emath/add","net.cgrand.xforms.reduce.cljs$core$IFn$_invoke$arity$1","cljs.core/*","net.cgrand.xforms/count","p__50247","vec__50249","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p__50248","vec__50252","x","n","ribelo.visby.math/pow","acc","ribelo.visby.quant.ann_return_geometric.cljs$core$IFn$_invoke$arity$1","G__50258","ribelo.visby.quant/ann-return-simple","ribelo.visby.stats/mean","ribelo.visby.emath/mul","ribelo.visby.quant.ann_return_simple.cljs$core$IFn$_invoke$arity$1","G__50260","ribelo.visby.quant/annualized-return","mode","G__50263","cljs.core/Keyword","ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$2","ribelo.visby.quant/active-return","xs","xs'","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","ribelo.visby.emath/sub","G__50266","ribelo.visby.quant/annualized-risk","ribelo.visby.stats/std","ribelo.visby.math/sqrt","ribelo.visby.quant.annualized_risk.cljs$core$IFn$_invoke$arity$1","G__50273","ribelo.visby.quant/sharpe-ratio","frisk","p__50275","vec__50277","mean","std","coll","ribelo.visby.quant.sharpe_ratio.cljs$core$IFn$_invoke$arity$1","G__50284","ribelo.visby.quant/adjusted-sharpe-ratio","ribelo.visby.stats/skewness","ribelo.visby.stats/kurtosis","p__50285","vec__50287","p__50286","vec__50291","cljs.core/transient","sr","sk","ku","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","ribelo.visby.quant.adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$1","G__50307","ribelo.visby.quant/annualized-adjusted-sharpe-ratio","p__50312","vec__50316","p__50313","vec__50322","annret","annrisk","G__50319","Math/round","G__50320","ribelo.visby.quant.annualized_adjusted_sharpe_ratio.cljs$core$IFn$_invoke$arity$3","G__50333","ribelo.visby.quant/downside-risk","mar","fnx","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","ribelo.visby.emath/min","ribelo.visby.emath/pow","net.cgrand.xforms.into.cljs$core$IFn$_invoke$arity$1","fny","p__50335","vec__50337","p__50336","vec__50340","count","sum","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","ribelo.visby.emath/div","cljs.core/+","ribelo.visby.quant.downside_risk.cljs$core$IFn$_invoke$arity$1","G__50347","ribelo.visby.quant/sortino-ratio","p__50349","vec__50351","p__50350","vec__50354","dr","ribelo.visby.quant.sortino_ratio.cljs$core$IFn$_invoke$arity$2","ribelo.visby.quant/drawdown","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","ribelo.visby.emath/cumprod","xf","val","cljs.core/volatile!","ribelo.visby.math/MIN-DOUBLE","val'","cljs.core/deref","ribelo.visby.math/max","cljs.core/vreset!","G__50379","G__50380","ribelo.visby.quant/continuous-drawdown","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1","cljs.core/neg?","p1__50381#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core/every?","rf","G__50383","G__50384","p1__50382#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","ribelo.visby.quant/average-drawdown","ribelo.visby.quant/maximum-drawdown","ribelo.visby.stats/max","ribelo.visby.quant/rate-of-return","net.cgrand.xforms.reductions.cljs$core$IFn$_invoke$arity$1","net.cgrand.xforms.rfs/some","net.cgrand.xforms/last","p__50386","vec__50388","p__50387","vec__50391","f","l","G__50398","ribelo.visby.quant/cagr","G__50415","ribelo.visby.quant/calmar-ratio","p__50416","vec__50418","p__50417","vec__50421","maxdd","ribelo.visby.quant.calmar_ratio.cljs$core$IFn$_invoke$arity$2","G__50425","ribelo.visby.quant/downside-potential","ribelo.visby.emath/max","p__50426","vec__50428","p__50427","vec__50455","ribelo.visby.quant.downside_potential.cljs$core$IFn$_invoke$arity$1","G__50459","ribelo.visby.quant/burke-ratio","ribelo.visby.quant.annualized_return.cljs$core$IFn$_invoke$arity$1","ribelo.visby.emath/sqrt","p__50460","vec__50462","p__50461","vec__50466","dd","c","G__50465","ribelo.visby.quant.burke_ratio.cljs$core$IFn$_invoke$arity$3","ribelo.visby.quant/ulcer-index","p__50473","vec__50475","p__50474","vec__50478","G__50482","ribelo.visby.quant/martin-ratio","p__50483","vec__50486","p__50484","vec__50489","u","ribelo.visby.quant.martin_ratio.cljs$core$IFn$_invoke$arity$2","ribelo.visby.quant/hurst-index","ribelo.visby.emath/cumdev","ribelo.visby.stats/min","p__50495","vec__50497","p__50496","vec__50503","mx","mn","rs","ribelo.visby.math/log","ribelo.visby.quant/info-ratio","p__50506","vec__50508","p__50507","vec__50511","ribelo.visby.quant/jensen-alpha","p__50514","vec__50516","p__50515","vec__50519","ribelo.visby.quant/modigliani","ys","vec__50523","stdb","p__50527","vec__50528","sharpe","G__50536","ribelo.visby.quant/rolling-economic-drawndown","net.cgrand.xforms/take-last","p__50543","vec__50544","data","high","ribelo.visby.quant.rolling_economic_drawndown.cljs$core$IFn$_invoke$arity$1","G__50551","ribelo.visby.quant/redp-allocation","risk","p__50553","vec__50554","redp","sharpe-ratio","ribelo.visby.math/min","ribelo.visby.quant.redp_allocation.cljs$core$IFn$_invoke$arity$2","ribelo.visby.quant/tick->ret","net.cgrand.xforms.partition.cljs$core$IFn$_invoke$arity$2","p__50557","vec__50558","y","G__50561","G__50562"]]],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1550407030000],["^14","cljs/spec/gen/alpha.cljs"],[1550407030000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^Q","^P","~$goog.Uri"]]],["^14","goog/math/math.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","~$goog.array","~$goog.asserts"]]],["^1A","^I"],[1533590554000],["^14","net/cgrand/xforms/rfs.cljc"],[1533590554000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","~$goog.string.StringBuffer"]]],["^14","goog/array/array.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1H"]]],["^14","ribelo/visby/math.cljc"],[1549908626000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P"]]],["^1A","~$net.cgrand.macrovich"],[1533155354000],["^14","goog/debug/error.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","goog/dom/nodetype.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^1A","~$cljs.spec.gen.alpha"],[1550407030000],["^14","goog/object/object.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],"~:SHADOW-TIMESTAMP",[1551533258000,1550407030000],["^14","net/cgrand/xforms.cljc"],[1533590554000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","^O","~$goog.structs.Queue"]]],["^14","goog/math/long.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1H","~$goog.reflect"]]],["^14","ribelo/visby/quant.cljc"],[1549908626000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","^?","^I","^O","^L","^S","^J"]]],["^14","goog/string/internal.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","goog/functions/functions.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","ribelo/visby/stats.cljc"],[1549908626000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","^I","^L","^S"]]],["^14","clojure/walk.cljs"],[1550407030000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P"]]],["^14","goog/structs/map.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/structs/queue.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1G"]]],["^1A","^?"],[1550407030000],["^14","goog/asserts/asserts.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","^O"],[1533590554000],["^14","cljs/spec/alpha.cljs"],[1550407030000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","~$goog.object","~$clojure.walk","^1K","~$clojure.string"]]],["^14","goog/base.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",[]]],["^14","goog/structs/structs.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1G","^1Y"]]],["^14","clojure/string.cljs"],[1550407030000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","^1S","^1I"]]],["^14","goog/string/string.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","~$goog.string.internal"]]],["^14","goog/reflect/reflect.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","ribelo/visby/emath.cljc"],[1549908626000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^P","^I","^L"]]],["^14","goog/string/stringbuffer.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","goog/iter/iter.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1G","^1H","~$goog.functions","~$goog.math"]]],["^14","cljs/core.cljs"],[1550407030000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^1S","^1Y","^1G","^1F","^1I"]]],["^14","goog/math/integer.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q"]]],["^14","goog/uri/utils.js"],[1550409022000,"^1B",["^ ","^1C",null,"^1D",["^B",[]],"^1E",["^Q","^1G","^1H","^1S"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",1,"^8",5,"^9",1,"^:",23],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","~$x","^I","^J","^J","^>","^?","^K","^L","^M","^J","^N","^O","^P","^P","^Q","^Q","^L","^L","~$s","^?","^R","^S","^S","^S","^?","^?","^O","^O","^I","^I"],"^T",["^B",["^U"]],"~:shadow/js-access-global",["^B",["Error"]],"^V",null,"~:defs",["^ ","~$martin-ratio",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",288,"^8",7,"^9",288,"^:",19,"~:arglists",["^Y",["~$quote",["^Y",[["~$frisk","~$freq"],["^2<"],[]]]]],"~:doc","A risk-adjusted measure with free risk and Ulcer index.\n   Martin Ratio = (Portfolio Return - RiskFree) / Ulcer Index\n   Mode: :return, :geometric (default: :return)","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^Y",[["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"~:arglists-meta",["^Y",[null,null,null]]]],"^C","~$ribelo.visby.quant/martin-ratio","^6","ribelo/visby/quant.cljc","^:",19,"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null]]],"^2C",["^Y",[["^2<","^2="],["^2<"],[]]],"~:protocol-impl",null,"^2A",2,"^2D",["^Y",[null,null,null]],"^8",1,"^2@",false,"~:methods",[["^ ","^2A",2,"^2@",false,"~:tag","~$function"],["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",288,"^9",288,"^2B",2,"~:fn-var",true,"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"^2>","A risk-adjusted measure with free risk and Ulcer index.\n   Martin Ratio = (Portfolio Return - RiskFree) / Ulcer Index\n   Mode: :return, :geometric (default: :return)"],"~$drawdown",["^ ","^C","~$ribelo.visby.quant/drawdown","^6","ribelo/visby/quant.cljc","^7",152,"^8",1,"^9",152,"^:",14,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",152,"^8",6,"^9",152,"^:",14],"^2>","Drawdowon from Peak. Any continuous losing return period.\n  Return drawdown from peak and time to recovery array.","^2H","^2I"],"~$downside-potential",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",230,"^8",7,"^9",230,"^:",25,"^2:",["^Y",["^2;",["^Y",[["~$mar"],[]]]]],"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2N"],[]]],"^2:",["^Y",[["^2N"],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/downside-potential","^6","ribelo/visby/quant.cljc","^:",25,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2N"],[]]],"^2:",["^Y",[["^2N"],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2N"],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",230,"^9",230,"^2B",1,"^2J",true,"^2:",["^Y",[["^2N"],[]]]],"~$modigliani",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",356,"^8",7,"^9",356,"^:",17,"^2:",["^Y",["^2;",["^Y",[["~$ys","^2<"]]]]],"^2>","Modigliani index for risk-adjusted return"],"^C","~$ribelo.visby.quant/modigliani","^6","ribelo/visby/quant.cljc","^:",17,"^2C",["^Y",[["^2Q","^2<"]]],"^2F",null,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^7",356,"~:ret-tag","^2I","^9",356,"^2B",2,"^2J",true,"^2:",["^Y",["^2;",["^Y",[["^2Q","^2<"]]]]],"^2>","Modigliani index for risk-adjusted return"],"~$maximum-drawdown",["^ ","^C","~$ribelo.visby.quant/maximum-drawdown","^6","ribelo/visby/quant.cljc","^7",185,"^8",1,"^9",185,"^:",22,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",185,"^8",6,"^9",185,"^:",22],"^2H","^2I"],"~$calmar-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",214,"^8",7,"^9",214,"^:",19,"^2:",["^Y",["^2;",["^Y",[["^2<","^2="],["^2<"],[]]]]],"^2>","A risk-adjusted measure like Sharpe ratio that uses maximum drawdown instead of\n  standard deviation for risk.","^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null]]]],"^C","~$ribelo.visby.quant/calmar-ratio","^6","ribelo/visby/quant.cljc","^:",19,"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null]]],"^2C",["^Y",[["^2<","^2="],["^2<"],[]]],"^2F",null,"^2A",2,"^2D",["^Y",[null,null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",2,"^2@",false,"^2H","^2I"],["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",214,"^9",214,"^2B",2,"^2J",true,"^2:",["^Y",[["^2<","^2="],["^2<"],[]]],"^2>","A risk-adjusted measure like Sharpe ratio that uses maximum drawdown instead of\n  standard deviation for risk."],"~$jensen-alpha",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",341,"^8",7,"^9",341,"^:",19,"^2:",["^Y",["^2;",["^Y",[["~$xs","^2<"]]]]],"^2>","Ex-post alpha calculated with regression line.\n  Free-risk is the avereage free-risk for the timeframe selected."],"^C","~$ribelo.visby.quant/jensen-alpha","^6","ribelo/visby/quant.cljc","^:",19,"^2C",["^Y",[["^2Y","^2<"]]],"^2F",null,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^7",341,"^2S","^2I","^9",341,"^2B",2,"^2J",true,"^2:",["^Y",["^2;",["^Y",[["^2Y","^2<"]]]]],"^2>","Ex-post alpha calculated with regression line.\n  Free-risk is the avereage free-risk for the timeframe selected."],"~$redp-allocation",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",386,"^8",7,"^9",386,"^:",22,"^2:",["^Y",["^2;",["^Y",[["~$risk","^2="],["^30"]]]]],"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^30","^2="],["^30"]]],"^2:",["^Y",[["^30","^2="],["^30"]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/redp-allocation","^6","ribelo/visby/quant.cljc","^:",22,"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^30","^2="],["^30"]]],"^2:",["^Y",[["^30","^2="],["^30"]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^30","^2="],["^30"]]],"^2F",null,"^2A",2,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",2,"^2@",false,"^2H","^2I"],["^ ","^2A",1,"^2@",false,"^2H","^2I"]],"^7",386,"^9",386,"^2B",2,"^2J",true,"^2:",["^Y",[["^30","^2="],["^30"]]]],"~$info-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",328,"^8",7,"^9",328,"^:",17,"^2:",["^Y",["^2;",["^Y",[["^2Y"]]]]],"^2>","Information Ratio"],"^C","~$ribelo.visby.quant/info-ratio","^6","ribelo/visby/quant.cljc","^:",17,"^2C",["^Y",[["^2Y"]]],"^2F",null,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^7",328,"^2S","^2I","^9",328,"^2B",1,"^2J",true,"^2:",["^Y",["^2;",["^Y",[["^2Y"]]]]],"^2>","Information Ratio"],"~$annualized-return",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",30,"^8",7,"^9",30,"^:",24,"^2:",["^Y",["^2;",["^Y",[["^2=","~$mode"],["^2="],[]]]]],"^2>","Average annualized returns over a period, convenient when comparing returns.\n  It can be an Arithmetic or Geometric (default) average return: if compounded with itself the\n  geometric average will be equal to the cumulative return","^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2=","^35"],["^2="],[]]],"^2:",["^Y",[["^2=","^35"],["^2="],[]]],"^2D",["^Y",[null,null,null]]]],"^C","~$ribelo.visby.quant/annualized-return","^6","ribelo/visby/quant.cljc","^:",24,"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2=","^35"],["^2="],[]]],"^2:",["^Y",[["^2=","^35"],["^2="],[]]],"^2D",["^Y",[null,null,null]]],"^2C",["^Y",[["^2=","^35"],["^2="],[]]],"^2F",null,"^2A",2,"^2D",["^Y",[null,null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",2,"^2@",false],["^ ","^2A",1,"^2@",false,"^2H","~$any"],["^ ","^2A",0,"^2@",false,"^2H","^37"]],"^7",30,"^9",30,"^2B",2,"^2J",true,"^2:",["^Y",[["^2=","^35"],["^2="],[]]],"^2>","Average annualized returns over a period, convenient when comparing returns.\n  It can be an Arithmetic or Geometric (default) average return: if compounded with itself the\n  geometric average will be equal to the cumulative return"],"~$rolling-economic-drawndown",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",372,"^8",7,"^9",372,"^:",33,"^2:",["^Y",["^2;",["^Y",[["^2="],[]]]]],"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/rolling-economic-drawndown","^6","ribelo/visby/quant.cljc","^:",33,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2="],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",372,"^9",372,"^2B",1,"^2J",true,"^2:",["^Y",[["^2="],[]]]],"~$burke-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",241,"^8",7,"^9",241,"^:",18,"^2:",["^Y",["^2;",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]]]],"^2>","A risk-adjusted measure with free risk and drawdowns.\n   For the 'simple' mode the excess return over free risk is divided by the square root of\n   the sum of the square of the drawdowns. For the 'modified' mode the Burke Ratio is multiplied\n   by the square root of the number of datas.","^2?",["^ ","^2@",false,"^2A",3,"^2B",3,"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null,null]]]],"^C","~$ribelo.visby.quant/burke-ratio","^6","ribelo/visby/quant.cljc","^:",18,"^2?",["^ ","^2@",false,"^2A",3,"^2B",3,"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null,null]]],"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2F",null,"^2A",3,"^2D",["^Y",[null,null,null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",3,"^2@",false,"^2H","^2I"],["^ ","^2A",2,"^2@",false,"^2H","^2I"],["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",241,"^9",241,"^2B",3,"^2J",true,"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2>","A risk-adjusted measure with free risk and drawdowns.\n   For the 'simple' mode the excess return over free risk is divided by the square root of\n   the sum of the square of the drawdowns. For the 'modified' mode the Burke Ratio is multiplied\n   by the square root of the number of datas."],"~$continuous-drawdown",["^ ","^C","~$ribelo.visby.quant/continuous-drawdown","^6","ribelo/visby/quant.cljc","^7",169,"^8",1,"^9",169,"^:",25,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",169,"^8",6,"^9",169,"^:",25],"^2H","^2I"],"~$sharpe-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",62,"^8",7,"^9",62,"^:",19,"^2:",["^Y",["^2;",["^Y",[["^2<"],[]]]]],"^2>","Sharpe Ratio.Compute Sharpe ratio for an collection XS of values (daily, weekly, etc) and\n   a free-risk rate. Annual free-risk must be divided to match the right timeframe.","^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2<"],[]]],"^2:",["^Y",[["^2<"],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/sharpe-ratio","^6","ribelo/visby/quant.cljc","^:",19,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2<"],[]]],"^2:",["^Y",[["^2<"],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2<"],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",62,"^9",62,"^2B",1,"^2J",true,"^2:",["^Y",[["^2<"],[]]],"^2>","Sharpe Ratio.Compute Sharpe ratio for an collection XS of values (daily, weekly, etc) and\n   a free-risk rate. Annual free-risk must be divided to match the right timeframe."],"~$active-return",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",44,"^8",7,"^9",44,"^:",20,"^2:",["^Y",["^2;",["^Y",[["^2Y","^2=","^35"]]]]],"^2>","Asset/Portfolio annualized return minus Benchmark annualized return"],"^C","~$ribelo.visby.quant/active-return","^6","ribelo/visby/quant.cljc","^:",20,"^2C",["^Y",[["^2Y","^2=","^35"]]],"^2F",null,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^7",44,"^2S","^2I","^9",44,"^2B",3,"^2J",true,"^2:",["^Y",["^2;",["^Y",[["^2Y","^2=","^35"]]]]],"^2>","Asset/Portfolio annualized return minus Benchmark annualized return"],"~$ann-return-geometric",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",10,"^8",7,"^9",10,"^:",27,"^2:",["^Y",["^2;",["^Y",[["^2="],[]]]]],"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/ann-return-geometric","^6","ribelo/visby/quant.cljc","^:",27,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2="],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",10,"^9",10,"^2B",1,"^2J",true,"^2:",["^Y",[["^2="],[]]]],"~$hurst-index",["^ ","^C","~$ribelo.visby.quant/hurst-index","^6","ribelo/visby/quant.cljc","^7",307,"^8",1,"^9",307,"^:",17,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",307,"^8",6,"^9",307,"^:",17],"^2>","It's a useful statistic for detecting if a time series is mean reverting (anti-persistent), totally random or persistent.\n   A value in the range [0.5) indicates mean-reverting (anti-persistent)\n   A value of 0.5 indicate a random walk\n   A value H in the range (0.5,1] indicates momentum (persistent)","^2H","^2I"],"~$sortino-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",138,"^8",7,"^9",138,"^:",20,"^2:",["^Y",["^2;",["^Y",[["^2<","^2N"],["^2<"],[]]]]],"^2>","Sortino ratio","^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2:",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2D",["^Y",[null,null,null]]]],"^C","~$ribelo.visby.quant/sortino-ratio","^6","ribelo/visby/quant.cljc","^:",20,"^2?",["^ ","^2@",false,"^2A",2,"^2B",2,"^2C",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2:",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2D",["^Y",[null,null,null]]],"^2C",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2F",null,"^2A",2,"^2D",["^Y",[null,null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",2,"^2@",false,"^2H","^2I"],["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",138,"^9",138,"^2B",2,"^2J",true,"^2:",["^Y",[["^2<","^2N"],["^2<"],[]]],"^2>","Sortino ratio"],"~$downside-risk",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",116,"^8",7,"^9",116,"^:",20,"^2:",["^Y",["^2;",["^Y",[["^2N"],[]]]]],"^2>","Downside Risk or Semi-Standard Deviation.\n   Measures the variability of underperformance below a minimum target rate","^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2N"],[]]],"^2:",["^Y",[["^2N"],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/downside-risk","^6","ribelo/visby/quant.cljc","^:",20,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2N"],[]]],"^2:",["^Y",[["^2N"],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2N"],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",116,"^9",116,"^2B",1,"^2J",true,"^2:",["^Y",[["^2N"],[]]],"^2>","Downside Risk or Semi-Standard Deviation.\n   Measures the variability of underperformance below a minimum target rate"],"~$ulcer-index",["^ ","^C","~$ribelo.visby.quant/ulcer-index","^6","ribelo/visby/quant.cljc","^7",273,"^8",1,"^9",273,"^:",17,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",273,"^8",6,"^9",273,"^:",17],"^2>","Ulcer Index of Peter G. Martin (1987). The impact of long, deep drawdowns will have significant\n  impact because the underperformance since the last peak is squared.","^2H","^2I"],"~$rate-of-return",["^ ","^C","~$ribelo.visby.quant/rate-of-return","^6","ribelo/visby/quant.cljc","^7",190,"^8",1,"^9",190,"^:",20,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",190,"^8",6,"^9",190,"^:",20],"^2>","Simple rate of return calculated from the last and the first value of\n  an array of numbers.","^2H","^2I"],"~$cagr",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",204,"^8",7,"^9",204,"^:",11,"^2:",["^Y",["^2;",["^Y",[["~$n"],[]]]]],"^2>","Compound annual growth rate","^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["~$n"],[]]],"^2:",["^Y",[["~$n"],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/cagr","^6","ribelo/visby/quant.cljc","^:",11,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["~$n"],[]]],"^2:",["^Y",[["~$n"],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["~$n"],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",204,"^9",204,"^2B",1,"^2J",true,"^2:",["^Y",[["~$n"],[]]],"^2>","Compound annual growth rate"],"~$ann-return-simple",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",22,"^8",7,"^9",22,"^:",24,"^2:",["^Y",["^2;",["^Y",[["^2="],[]]]]],"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/ann-return-simple","^6","ribelo/visby/quant.cljc","^:",24,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2="],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",22,"^9",22,"^2B",1,"^2J",true,"^2:",["^Y",[["^2="],[]]]],"~$adjusted-sharpe-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",76,"^8",7,"^9",76,"^:",28,"^2:",["^Y",["^2;",["^Y",[["^2<"],[]]]]],"^2>","Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis.","^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2<"],[]]],"^2:",["^Y",[["^2<"],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/adjusted-sharpe-ratio","^6","ribelo/visby/quant.cljc","^:",28,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2<"],[]]],"^2:",["^Y",[["^2<"],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2<"],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",76,"^9",76,"^2B",1,"^2J",true,"^2:",["^Y",[["^2<"],[]]],"^2>","Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis."],"~$annualized-adjusted-sharpe-ratio",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",91,"^8",7,"^9",91,"^:",39,"^2:",["^Y",["^2;",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]]]],"^2>","Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis.","^2?",["^ ","^2@",false,"^2A",3,"^2B",3,"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null,null]]]],"^C","~$ribelo.visby.quant/annualized-adjusted-sharpe-ratio","^6","ribelo/visby/quant.cljc","^:",39,"^2?",["^ ","^2@",false,"^2A",3,"^2B",3,"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2D",["^Y",[null,null,null,null]]],"^2C",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2F",null,"^2A",3,"^2D",["^Y",[null,null,null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",3,"^2@",false,"^2H","^2I"],["^ ","^2A",2,"^2@",false,"^2H","^2I"],["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",91,"^9",91,"^2B",3,"^2J",true,"^2:",["^Y",[["^2<","^2=","^35"],["^2<","^2="],["^2<"],[]]],"^2>","Sharpe Ratio adjusted for skewness and kurtosis with a penalty factor\n   for negative skewness and excess kurtosis."],"~$annualized-risk",["^ ","^29",null,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",53,"^8",7,"^9",53,"^:",22,"^2:",["^Y",["^2;",["^Y",[["^2="],[]]]]],"^2>","Annualized standard deviation of asset/portfolio returns","^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]]],"^C","~$ribelo.visby.quant/annualized-risk","^6","ribelo/visby/quant.cljc","^:",22,"^2?",["^ ","^2@",false,"^2A",1,"^2B",1,"^2C",["^Y",[["^2="],[]]],"^2:",["^Y",[["^2="],[]]],"^2D",["^Y",[null,null]]],"^2C",["^Y",[["^2="],[]]],"^2F",null,"^2A",1,"^2D",["^Y",[null,null]],"^8",1,"^2@",false,"^2G",[["^ ","^2A",1,"^2@",false,"^2H","^2I"],["^ ","^2A",0,"^2@",false,"^2H","^2I"]],"^7",53,"^9",53,"^2B",1,"^2J",true,"^2:",["^Y",[["^2="],[]]],"^2>","Annualized standard deviation of asset/portfolio returns"],"~$average-drawdown",["^ ","^C","~$ribelo.visby.quant/average-drawdown","^6","ribelo/visby/quant.cljc","^7",180,"^8",1,"^9",180,"^:",22,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",180,"^8",6,"^9",180,"^:",22],"^2H","^2I"],"~$tick->ret",["^ ","^C","~$ribelo.visby.quant/tick->ret","^6","ribelo/visby/quant.cljc","^7",406,"^8",1,"^9",406,"^:",15,"^5",["^ ","^6","ribelo/visby/quant.cljc","^7",406,"^8",6,"^9",406,"^:",15],"^2>","Convert a value series to a return series","^2H","^2I"]],"^W",["^ ","^P","^P","~$x","^I","^>","^?","^N","^O","~$s","^?","^?","^?","^O","^O","^I","^I"],"~:cljs.analyzer/constants",["^ ","^T",["^B",["~:geometric","~:simple"]],"~:order",["^41","^42"]],"^10",["^ ","^U",["^B",[]]],"^11",["^ "],"^12",["^Q","^P","^?","^I","^O","^L","^S","^J"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1@",[["^46","~:static-fns"],true,["^46","~:elide-asserts"],false,["^46","~:optimize-constants"],null,["^46","^17"],null,["^46","~:external-config"],null,["^46","~:tooling-config"],null,["^46","~:emit-constants"],null,["^46","~:load-tests"],null,["^46","~:infer-externs"],true,["^46","^19"],null,["~:js-options","~:js-provider"],"^U",["~:mode"],"~:dev",["^46","~:fn-invoke-direct"],null,["^46","~:source-map"],"/dev/null"]]]