["^ ","~:output",["^ ","~:js","goog.provide('taoensso.truss');\ngoog.require('cljs.core');\ngoog.require('taoensso.truss.impl');\n/**\n * Returns current value of dynamic assertion data.\n */\ntaoensso.truss.get_dynamic_assertion_data = (function taoensso$truss$get_dynamic_assertion_data(){\nreturn taoensso.truss.impl._STAR__QMARK_data_STAR_;\n});\ntaoensso.truss._error_fn = (function taoensso$truss$_error_fn(f){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328))){\nreturn taoensso.truss.impl.default_error_fn;\n} else {\nreturn f;\n}\n});\n/**\n * Sets the root (fn [data-map-delay]) called on invariant violations.\n */\ntaoensso.truss.set_error_fn_BANG_ = (function taoensso$truss$set_error_fn_BANG_(f){\nreturn taoensso.truss.impl._STAR_error_fn_STAR_ = taoensso.truss._error_fn(f);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","An opinionated assertions API for Clojure/Script.","~:file","taoensso/truss.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",["^ ","~$-invariant","~$taoensso.truss.impl"],"~:excludes",["~#set",[]],"~:name","~$taoensso.truss","~:op","~:ns","~:imports",null,"~:requires",["^ ","^B","^B","~$impl","^B","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^B","^B","^K","^B","^L","^L"],"~:form",["~#list",["~$ns","^F","An opinionated assertions API for Clojure/Script.",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^S",["^O",["^B","~:as","^K","~:refer-macros",["^A"]]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^B"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","taoensso/truss.cljs"],"~:compiled-at",1553779912994,"~:resource-name","taoensso/truss.cljs","~:warnings",[],"~:source","(ns taoensso.truss\n  \"An opinionated assertions API for Clojure/Script.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n                                                                             \n         (:require [taoensso.truss.impl :as impl :refer-macros [-invariant]]))\n\n(comment (require '[taoensso.encore :as enc :refer (qb)]))\n\n;;;; Core API\n\n              \n                                                                  \n                                                                             \n                                                                     \n\n                                                                         \n                \n\n                                                                             \n                                                  \n\n                                                                  \n                                              \n\n                                                                   \n                                                               \n\n                             \n                                                        \n                                                                    \n\n               \n                                                                          \n                                                           \n                                                                     \n                                                                                    \n                                                        \n                                                                        \n\n               \n                                                                          \n                                                                 \n                                                        \n                                                              \n\n                \n                                                                           \n                                                                          \n                                        \n\n                                                                            \n                                                                            \n                                                        \n                                                                         \n\n(comment\n  (let [x 5]      (have    integer? x))\n  (let [x 5]      (have    string?  x))\n  (let [x 5]      (have :! string?  x))\n  (let [x 5 y  6] (have odd?  x x x y x))\n  (let [x 0 y :a] (have zero? x x x y x))\n  (have string? (do (println \"eval1\") \"foo\")\n                (do (println \"eval2\") \"bar\"))\n  (have number? (do (println \"eval1\") 5)\n                (do (println \"eval2\") \"bar\")\n                (do (println \"eval3\") 10))\n  (have pos? \"hello\")\n  (have pos? (/ 1 0))\n  (have nil? false)\n  (have nil)\n  (have false)\n  (have string? :in [\"a\" \"b\"])\n  (have string? :in (if true  [\"a\" \"b\"] [1 2]))\n  (have string? :in (if false [\"a\" \"b\"] [1 2]))\n  (have string? :in (mapv str (range 10)))\n  (have string? :in [\"a\" 1])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\"])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\" 1])\n  ((fn foo [x] {:pre [(have? integer? x)]} (* x x)) \"foo\")\n  (macroexpand '(have a))\n  (have? [:or nil? string?] \"hello\")\n  (macroexpand '(have? [:or nil? string?] \"hello\"))\n  (have? [:set>= #{:a :b}]    [:a :b :c])\n  (have? [:set<= [:a :b :c]] #{:a :b})\n  (qb 10000\n    (with-error-fn nil                  (have? string? 5))\n    (with-error-fn (fn [_] :truss/error) (have? string? 5)))\n\n  (have string? (range 1000)))\n\n(comment\n  ;; HotSpot is great with these:\n  (qb 10000\n    (string? \"a\")\n    (have?   \"a\")\n    (have            string?  \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\" :data \"foo\"))\n  ;; [     5.59 26.48 45.82     ] ; 1st gen (macro form)\n  ;; [     3.31 13.48 36.22     ] ; 2nd gen (fn form)\n  ;; [0.82 1.75  7.57 27.05     ] ; 3rd gen (lean macro form)\n  ;; [0.4  0.47  1.3  1.77  1.53] ; 4th gen (macro preds)\n\n  (qb 10000\n    (have  string? :in [\"foo\" \"bar\" \"baz\"])\n    (have? string? :in [\"foo\" \"bar\" \"baz\"]))\n\n  (macroexpand '(have string? 5))\n  (macroexpand '(have string? 5 :data \"foo\"))\n  (macroexpand '(have string? 5 :data (enc/get-env)))\n  (let [x :x]   (have string? 5 :data (enc/get-env)))\n\n  (have string? 5)\n  (have string? 5 :data {:a \"a\"})\n  (have string? 5 :data {:a (/ 5 0)})\n\n  ((fn [x]\n     (let [a \"a\" b \"b\"]\n       (have string? x :data {:env (enc/get-env)}))) 5))\n\n;;;; Utils\n\n(defn get-dynamic-assertion-data\n  \"Returns current value of dynamic assertion data.\"\n  [] impl/*?data*)\n\n                                     \n                                                                  \n                                                                     \n                                                       \n\n(comment (with-dynamic-assertion-data \"foo\" (have string? 5 :data \"bar\")))\n\n(defn-   -error-fn [f] (if (= f :default) impl/default-error-fn f))\n(defn set-error-fn!\n  \"Sets the root (fn [data-map-delay]) called on invariant violations.\"\n  [f]\n         (set!             impl/*error-fn*        (-error-fn f))\n                                                                  )\n\n                                  \n                                                     \n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/truss.cljx\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAMA,AAiDA,AAmCA,AAgCA;;;AAAA,AAAMA;AAAN,AAEKC;;AAOL,AAEA,AAAA,AAASC,AAAWC;AAApB,AAAuB,AAAI,AAAA,AAACC,AAAED;AAAYE;;AAAsBF;;;AAChE;;;AAAA,AAAMG,AAEHH;AAFH,AAGS,AAAkBI,AAAuB,AAACL,AAAUC","names",["taoensso.truss/get-dynamic-assertion-data","taoensso.truss.impl/*?data*","taoensso.truss/-error-fn","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/default-error-fn","taoensso.truss/set-error-fn!","taoensso.truss.impl/*error-fn*"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1550407030000],["^[","goog/math/math.js"],[1550409022000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^M","~$goog.array","~$goog.asserts"]]],["^[","goog/array/array.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B"]]],["^[","goog/debug/error.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/dom/nodetype.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/object/object.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],"~:SHADOW-TIMESTAMP",[1551533258000,1550407030000],["^[","goog/math/long.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B","~$goog.reflect"]]],["^[","taoensso/truss.cljs"],[1533155349000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L","^B"]]],["^[","goog/string/internal.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/functions/functions.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","taoensso/truss/impl.cljs"],[1533155349000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L","~$clojure.set"]]],["^[","goog/structs/map.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",[]]],["^[","goog/structs/structs.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","~$goog.object"]]],["^[","goog/string/string.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/string/stringbuffer.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/iter/iter.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.functions","~$goog.math"]]],["^[","cljs/core.cljs"],[1550407030000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1J","^1P","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^1<","^B"],[1533155349000],["^[","clojure/set.cljs"],[1550407030000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L"]]],["^[","goog/uri/utils.js"],[1550409022000,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","^1J"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","An opinionated assertions API for Clojure/Script.","^8","taoensso/truss.cljs","^9",1,"^:",5,"^;",1,"^<",19],"^=",["^ ","^>","^?"],"^@",["^ ","^A","^B"],"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^B","^B","^K","^B","^L","^L","^M","^M"],"^N",["^D",["^O"]],"^P",null,"~:defs",["^ ","~$get-dynamic-assertion-data",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",123,"^:",7,"^;",123,"^<",33,"~:arglists",["^S",["~$quote",["^S",[[]]]]],"^7","Returns current value of dynamic assertion data."],"^E","~$taoensso.truss/get-dynamic-assertion-data","^8","taoensso/truss.cljs","^<",33,"~:method-params",["^S",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^:",1,"~:variadic?",false,"^9",123,"~:ret-tag","~$clj-nil","^;",123,"~:max-fixed-arity",0,"~:fn-var",true,"^20",["^S",["^21",["^S",[[]]]]],"^7","Returns current value of dynamic assertion data."],"~$-error-fn",["^ ","^1[",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",134,"^:",10,"^;",134,"^<",19,"~:private",true,"^20",["^S",["^21",["^S",[["~$f"]]]]]],"^2<",true,"^E","~$taoensso.truss/-error-fn","^8","taoensso/truss.cljs","^<",19,"^23",["^S",[["~$f"]]],"^24",null,"^25",["^S",[null,null]],"^:",1,"^26",false,"^9",134,"^;",134,"^29",1,"^2:",true,"^20",["^S",["^21",["^S",[["~$f"]]]]]],"~$set-error-fn!",["^ ","^1[",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",135,"^:",7,"^;",135,"^<",20,"^20",["^S",["^21",["^S",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."],"^E","~$taoensso.truss/set-error-fn!","^8","taoensso/truss.cljs","^<",20,"^23",["^S",[["~$f"]]],"^24",null,"^25",["^S",[null,null]],"^:",1,"^26",false,"^9",135,"^;",135,"^29",1,"^2:",true,"^20",["^S",["^21",["^S",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."]],"^Q",["^ ","^B","^B","^K","^B","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:default"]],"~:order",["^2A"]],"^W",["^ ","^O",["^D",[]]],"^X",["^ "],"^Y",["^M","^L","^B"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^2E","~:static-fns"],true,["^2E","~:elide-asserts"],false,["^2E","~:optimize-constants"],null,["^2E","^12"],null,["^2E","~:external-config"],null,["^2E","~:tooling-config"],null,["^2E","~:emit-constants"],null,["^2E","~:load-tests"],null,["^2E","~:infer-externs"],true,["^2E","^14"],null,["~:js-options","~:js-provider"],"^O",["~:mode"],"~:dev",["^2E","~:fn-invoke-direct"],null,["^2E","~:source-map"],"/dev/null"]]]