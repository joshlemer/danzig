{"version":3,"sources":["net/cgrand/xforms/rfs.cljc"],"mappings":"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","names":["net.cgrand.xforms.rfs/cmp","f","a","b","r","var_args","G__42956","net.cgrand.xforms.rfs/minimum","js/Error","comparator","x","absolute-maximum","cljs.core/keyword-identical?","G__42958","net.cgrand.xforms.rfs/maximum","absolute-minimum","net.cgrand.xforms.rfs/min","net.cgrand.xforms.rfs.minimum.cljs$core$IFn$_invoke$arity$1","cljs.core/compare","net.cgrand.xforms.rfs/max","net.cgrand.xforms.rfs.maximum.cljs$core$IFn$_invoke$arity$1","G__42960","net.cgrand.xforms.rfs/avg","acc","net.cgrand.xforms.rfs.avg.cljs$core$IFn$_invoke$arity$3","w","or__4131__auto__","G__42962","G__42972","net.cgrand.xforms.rfs/sd","s","n","G__42973","Math/sqrt","m","d","m'","G__42974","G__42976","net.cgrand.xforms.rfs/last","_","G__42978","net.cgrand.xforms.rfs/some","cljs.core/reduced","G__42980","net.cgrand.xforms.rfs/str!","js/goog.string.StringBuffer","sb","x_42993","x_42994","net.cgrand.xforms.rfs/str","cljs.core.completing.cljs$core$IFn$_invoke$arity$2","cljs.core/str"],"sourcesContent":["(ns net.cgrand.xforms.rfs\n  {:author \"Christophe Grand\"}\n  (:refer-clojure :exclude [str last min max some])\n  #?(:cljs (:require-macros\n             [net.cgrand.macrovich :as macros]\n             [net.cgrand.xforms.rfs :refer [or-instance?]])\n      :clj (:require [net.cgrand.macrovich :as macros]))\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core])\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n(macros/deftime\n  (defmacro ^:private or-instance? [class x y]\n    (let [xsym (gensym 'x_)]\n      `(let [~xsym ~x]\n         (if (instance? ~class ~xsym) ~(with-meta xsym {:tag class}) ~y)))))\n\n(declare str!)\n\n(macros/usetime\n\n#? (:cljs\n     (defn ^:private cmp [f a b]\n       (let [r (f a b)]\n         (cond\n           (number? r) r\n           r -1\n           (f b a) 1\n           :else 0))))\n  \n(defn minimum\n ([comparator]\n   (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (pos? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-maximum]\n   (fn\n     ([] ::+\u221e)\n     ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::+\u221e x)\n            absolute-maximum\n            x))\n     ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::+\u221e a) (pos? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(defn maximum\n  ([comparator]\n    (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (neg? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n  ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-minimum]\n    (fn\n      ([] ::-\u221e)\n      ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::-\u221e x)\n             absolute-minimum\n             x))\n      ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::-\u221e a) (neg? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(def min (minimum compare))\n\n(def max (maximum compare))\n\n(defn avg\n  \"Reducing fn to compute the arithmetic mean.\"\n  ([] nil)\n  ([^doubles acc] (when acc (/ (aget acc 1) (aget acc 0))))\n  ([acc x] (avg acc x 1))\n  ([^doubles acc x w] ; weighted mean\n    (let [acc (or acc #?(:clj (double-array 3) :cljs #js [0.0 0.0]))]\n      (doto acc\n        (aset 0 (+ (aget acc 0) w))\n        (aset 1 (+ (aget acc 1) (* w x)))))))\n\n(defn sd\n  \"Reducing fn to compute the standard deviation. Returns 0 if no or only one item.\"\n  ([] #?(:clj (double-array 3) :cljs #js [0.0 0.0 0.0]))\n  ([^doubles a]\n    (let [s (aget a 0) n (aget a 2)]\n      (if (< 1 n)\n        (Math/sqrt (/ s (dec n)))\n        0.0)))\n  ([^doubles a x]\n    (let [s (aget a 0) m (aget a 1) n (aget a 2)\n          d (- x m)\n          n (inc n)\n          m' (+ m (/ d n))]\n      (doto a\n        (aset 0 (+ s (* d (- x m'))))\n        (aset 1 m')\n        (aset 2 n)))))\n\n(defn last\n  \"Reducing function that returns the last value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] x))\n\n(defn some\n  \"Reducing function that returns the first logical true value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] (when x (reduced x))))\n\n(defn str!\n  \"Like xforms/str but returns a StringBuilder.\"\n  ([] (#?(:clj StringBuilder. :cljs StringBuffer.)))\n  ([sb] (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb)))) ; the instance? checks are for compatibility with str in case of seeded reduce/transduce.\n  ([sb x] (.append (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb))) x)))\n\n(def str\n  \"Reducing function to build strings in linear time. Acts as replacement for clojure.core/str in a reduce/transduce call.\"\n  (completing str! core/str))\n\n#_(defn juxt\n   \"Returns a reducing fn which compute all rfns at once and whose final return\n   value is a vector of the final return values of each rfns.\"\n   [& rfns]\n   (let [rfns (mapv ensure-kvrf rfns)]\n     (kvrf\n       ([] (mapv #(vector % (volatile! (%))) rfns))\n       ([acc] (mapv (fn [[rf vacc]] (rf (unreduced @vacc))) acc))\n       ([acc x]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf x) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc))))\n       ([acc k v]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf k v) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc)))))))\n\n#_(defn juxt-map\n   [& key-rfns]\n   (let [f (apply juxt (take-nth 2 (next key-rfns)))\n         keys (vec (take-nth 2 key-rfns))]\n     (let [f (ensure-kvrf f)]\n       (kvrf\n         ([] (f))\n         ([acc] (zipmap keys (f acc)))\n         ([acc x] (f acc x))\n         ([acc k v] (f acc k v))))))\n)\n"]}